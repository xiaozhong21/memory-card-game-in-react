{"version":3,"sources":["Components/Score.js","Components/Card.js","Components/Deck.js","Components/helpers.js","Components/Board.js","App.js","index.js"],"names":["Score","currentScore","bestScore","className","Card","pokemon","onClick","src","image","alt","name","Deck","pokemons","map","id","shufflePokemons","array","i","length","j","Math","floor","random","Board","useState","setPokemons","clickHistory","setClickHistory","setCurrentScore","setBestScore","fetchPokemons","number","a","pokemonUrl","fetch","response","json","sprites","front_default","push","useEffect","loadCards","prevBestScore","alert","prevScore","includes","prevPokemons","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAEe,SAASA,EAAT,GAA2C,IAA3BC,EAA0B,EAA1BA,aAAcC,EAAY,EAAZA,UAC3C,OACE,sBAAKC,UAAU,YAAf,UACI,sBAAKA,UAAU,gBAAf,4BAA+CF,KAC/C,sBAAKE,UAAU,aAAf,yBAAyCD,QCHlC,SAASE,EAAT,GAAmC,IAApBC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,QACrC,OACE,sBAAKH,UAAU,OAAOG,QAASA,EAA/B,UACE,qBAAKC,IAAKF,EAAQG,MAAOC,IAAKJ,EAAQK,OACtC,4BAAIL,EAAQK,UCHH,SAASC,EAAT,GAAoC,IAArBC,EAAoB,EAApBA,SAAUN,EAAU,EAAVA,QAEtC,OACE,qBAAKH,UAAU,YAAf,SACGS,EAASC,KAAI,SAACR,GAAD,OACZ,cAACD,EAAD,CAAuBC,QAASA,EAASC,QAAS,kBAAMA,EAAQD,KAArDA,EAAQS,SCPpB,SAASC,EAAgBC,GAC9B,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAOlB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAPkC,KAO9BD,EAAMG,GAPwB,KAS3C,OAAOH,ECNM,SAASO,IACtB,IAGA,EAAgCC,mBAAS,IAAzC,mBAAOZ,EAAP,KAAiBa,EAAjB,KACA,EAAwCD,mBAAS,IAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KACA,EAAwCH,mBAAS,GAAjD,mBAAOvB,EAAP,KAAqB2B,EAArB,KACA,EAAkCJ,mBAAS,GAA3C,mBAAOtB,EAAP,KAAkB2B,EAAlB,KAGMC,EAAa,uCAAG,WAAOC,GAAP,+BAAAC,EAAA,sDACdpB,EAAW,GAERK,EAAI,EAHO,YAGJA,GAAKc,GAHD,wBAIZE,EAJY,4CAIsChB,GAJtC,SAKKiB,MAAMD,GALX,cAKZE,EALY,gBAMIA,EAASC,OANb,OAMZ/B,EANY,OAOXS,EAAqBT,EAArBS,GAAIJ,EAAiBL,EAAjBK,KAAM2B,EAAWhC,EAAXgC,QAGX7B,EAAQ6B,EAAQC,cACtB1B,EAAS2B,KAAK,CAAEzB,KAAIJ,OAAMF,UAXR,QAGSS,IAHT,gDAcbL,GAda,4CAAH,sDAkBnB4B,qBAAU,YACO,uCAAG,sBAAAR,EAAA,kEAChBP,EADgB,KACJV,EADI,SACkBe,EA7Bf,IA4BH,iGAAH,qDAIfW,KACC,IAGHD,qBAAU,WACRX,GAAa,SAACa,GAAD,OAAmBzC,EAAeyC,EAAgBzC,EAAeyC,KACzD,KAAjBzC,IACF0C,MAAM,2DACNf,EAAgB,GAChBD,EAAgB,KAEG,IAAjB1B,IACF2B,EAAgB,GAChBD,EAAgB,OAEjB,CAAC1B,IASJ,OACE,gCACE,oBAAIE,UAAU,SAAd,iCACA,oBAAIA,UAAU,cAAd,uFACA,cAACH,EAAD,CAAOC,aAAcA,EAAcC,UAAWA,IAC9C,cAACS,EAAD,CAAMC,SAAUA,EAAUN,QAXV,SAACD,GACnBuB,GAAgB,SAACgB,GAAD,OAAelB,EAAamB,SAASxC,GAAW,EAAIuC,EAAY,KAChFnB,GAAY,SAACqB,GAAD,OAAkB/B,EAAgB+B,MAC9CnB,GAAgB,uCAAWD,GAAX,CAAyBrB,aChD9B0C,MARf,WACE,OACE,qBAAK5C,UAAU,MAAf,SACE,cAACoB,EAAD,OCHNyB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.9dbe8db9.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Score({currentScore, bestScore}) {\n  return (\n    <div className=\"score-div\">\n        <div className=\"current-score\">Current Score: {currentScore}</div>\n        <div className=\"best-score\">Best Score: {bestScore}</div>\n    </div>\n  )\n}\n","import React from 'react';\nimport '../App.css';\n\nexport default function Card({pokemon, onClick}) {\n  return (\n    <div className=\"card\" onClick={onClick} >\n      <img src={pokemon.image} alt={pokemon.name} />\n      <p>{pokemon.name}</p>\n    </div>\n  )\n}\n","import React from 'react';\nimport Card from './Card';\n\n\nexport default function Deck({pokemons, onClick}) {\n\n  return (\n    <div className=\"card-deck\">\n      {pokemons.map((pokemon) => (\n        <Card key={pokemon.id} pokemon={pokemon} onClick={() => onClick(pokemon)}/>\n      ))}\n    </div>\n  )\n}\n","//Use Fisher-Yates shuffle method: walk the array in the reverse order and \n//swap each element with a random one before it\nexport function shufflePokemons(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n\n    // swap elements array[i] and array[j]\n    // we use \"destructuring assignment\" syntax to achieve that\n    // same can be written as:\n    // let t = array[i]; array[i] = array[j]; array[j] = t\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n","import React, { useState, useEffect } from 'react'\nimport Score from './Score'\nimport Deck from './Deck'\nimport { shufflePokemons } from './helpers'\n\n\nexport default function Board() {\n  const POKEMON_NUMBER = 12;\n\n  //Set states\n  const [pokemons, setPokemons] = useState([]);\n  const [clickHistory, setClickHistory] = useState([]);\n  const [currentScore, setCurrentScore] = useState(0)\n  const [bestScore, setBestScore] = useState(0)\n\n  //Fetch pokemon name, id, and image from pokemon API\n  const fetchPokemons = async (number) => {\n    const pokemons = []\n\n    for (let i = 1; i <= number; i++) {\n      const pokemonUrl = `https://pokeapi.co/api/v2/pokemon/${i}`\n      const response = await fetch(pokemonUrl)\n      const pokemon = await response.json()\n      const {id, name, sprites} = pokemon;\n      // const id = pokemon.id\n      // const name = pokemon.name\n      const image = sprites.front_default\n      pokemons.push({ id, name, image })\n    }\n\n    return pokemons\n  }\n\n  //Shuffle the array of pokemons retrieved from API upon page loading\n  useEffect(() => {\n    const loadCards = async () => {\n      setPokemons(shufflePokemons(await fetchPokemons(POKEMON_NUMBER)))\n    };\n\n    loadCards()\n  }, []) // <--  empty array means 'run once' after initial render, similar to componentDidMount\n\n  //Handle effects of current score on best score and game reset\n  useEffect(() => {\n    setBestScore((prevBestScore) => currentScore > prevBestScore ? currentScore : prevBestScore);\n    if (currentScore === 12) {\n      alert(\"Awesome! You achieved the highest possible score of 12!\")\n      setCurrentScore(0);\n      setClickHistory([]);\n    };\n    if (currentScore === 0) {\n      setCurrentScore(0);\n      setClickHistory([]);\n    }\n  }, [currentScore])\n\n  // Handle clicks on cards\n  const handleClick = (pokemon) => {\n    setCurrentScore((prevScore) => clickHistory.includes(pokemon) ? 0 : prevScore + 1);\n    setPokemons((prevPokemons) => shufflePokemons(prevPokemons));\n    setClickHistory(() => ([...clickHistory, pokemon]));\n  }\n\n  return (\n    <div>\n      <h1 className=\"header\">PoKeMoN Memory Game</h1>\n      <h4 className=\"description\">Get points by clicking on an image but don't click on any more than once!</h4>\n      <Score currentScore={currentScore} bestScore={bestScore} />\n      <Deck pokemons={pokemons} onClick={handleClick} />\n    </div>\n  )\n}\n","import React from 'react';\nimport './App.css';\nimport Board from './Components/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}